/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:Crestron;
System Name:Daikin Module;
System Number:
Programmer:MFR;
Comments:
*/
/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "Daikin F-C Conversion v2"
// #HINT ""
// #DEFINE_CONSTANT
#CATEGORY "22" // HVAC
// #DEFAULT_VOLATILE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
// DIGITAL_INPUT                       
ANALOG_INPUT SetpointF_In, SetpointC_In, RoomTempC_In; 
// STRING_INPUT 
// BUFFER_INPUT 

// DIGITAL_OUTPUT 
ANALOG_OUTPUT SetpointF_Out, SetpointC_Out, RoomTempF_Out;
// STRING_OUTPUT 


/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
     

CHANGE SetpointF_In
{
  Integer SetpointC_Out_Q;
  Integer SetpointC_Out_R;

	If 
	(SetpointF_In <= 60)SetpointC_Out = 160;
     		
	Else If 
	(SetpointF_In >= 90)SetpointC_Out = 320;
		
	Else 
		{
		SetpointC_Out_Q = (((SetpointF_In*10) - 320) / 9);
		SetpointC_Out_R = (((SetpointF_In*10) - 320) MOD 9);
		SetpointC_Out=(SetpointC_Out_Q*5)+((SetpointC_Out_R*5)/10);
		}	
	  //end setpoint check
}     //end Change SetpointF_In  

CHANGE SetpointC_In
{ 
  Integer SetpointF_Outx10Q, SetpointF_Outx10R, SetpointF_Outx10, SetpointF_OutQ, SetpointF_OutR;
	
	If (SetpointC_In < 161)
		SetpointF_Out = 60;
	Else If (SetpointC_In > 317)
		SetpointF_Out = 90;
	Else 
	{
	SetpointF_Outx10Q = (SetpointC_In/5);
	SetpointF_Outx10R = (SetpointC_In MOD 5);
	SetpointF_Outx10 = ((SetpointF_Outx10Q * 9) + ((SetpointF_Outx10R * 9) / 10))+320;	
	SetpointF_OutQ = SetpointF_Outx10 / 10;
	SetpointF_OutR = SetpointF_Outx10 MOD 10;	
		If (SetpointF_OutR < 5)
			SetpointF_Out = SetpointF_OutQ;
		Else 
			SetpointF_Out = SetpointF_OutQ + 1;
	}
} 

CHANGE RoomtempC_In
{
Integer RoomtempF_Outx10Q, RoomtempF_Outx10R, RoomtempF_Outx10, RoomtempF_OutQ, RoomtempF_OutR;

	RoomtempF_Outx10Q = (RoomtempC_In/5);
	RoomtempF_Outx10R = (RoomtempC_In MOD 5);
	RoomtempF_Outx10 = ((RoomtempF_Outx10Q * 9) + ((RoomtempF_Outx10R * 9) / 10))+320;	
	RoomtempF_OutQ = RoomtempF_Outx10 / 10;
	RoomtempF_OutR = RoomtempF_Outx10 MOD 10;	
		If (RoomtempF_OutR < 5)
			RoomtempF_Out = RoomtempF_OutQ;
		Else 
			RoomtempF_Out = RoomtempF_OutQ + 1;} 


/*
EVENT
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

 WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}

