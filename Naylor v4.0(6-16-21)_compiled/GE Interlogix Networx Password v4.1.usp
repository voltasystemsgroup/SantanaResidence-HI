/***********************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
***********************************************************************************/
/*
Dealer Name:		Crestron Electronics
System Name:
System Number:
Programmer:			PAC
Comments:
*/
/***********************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
***********************************************************************************/
#SYMBOL_NAME "GE Interlogix Networx Password Module v4.1"
// #HINT ""
#DEFINE_CONSTANT	csREPLACECHAR		"*"
#DEFINE_CONSTANT	csENDCHAR				"\xFF\x01"

#DEFINE_CONSTANT	ciPASSWORDLEN		6

#CATEGORY "21" // Security
#DEFAULT_VOLATILE

#HELP_BEGIN
	For use inside the GE Interlogix Networx Partition module only.
#HELP_END
/***********************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
***********************************************************************************/
DIGITAL_INPUT	Clear, Backspace, Key[10];
ANALOG_INPUT	Partition_Number;
BUFFER_INPUT	Command$[10], From_Processor$[250];

STRING_OUTPUT	Password_Replaced$, To_Processor_Module$;
ANALOG_OUTPUT	Partition_Condition_Flag[7];
/***********************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
***********************************************************************************/
INTEGER	iCount, iKey, a, iTemp, iTempPassChr, iTempPassChr1, iTemp1, iTemp2,
				iTempPassChr2, iTempPassChr3, iPart, iFlag1, b, iConditionFlag[7];
STRING	sPin[ciPASSWORDLEN], sReplaced[ciPASSWORDLEN], sTemp[20], sPass[3],
				sInTemp[40];
/***********************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
***********************************************************************************/
PUSH key
{
	iKey = getlastmodifiedarrayindex() - 1;
	if(len(sPin) < ciPASSWORDLEN)
	{
		makestring(sPin, "%s%d", sPin, iKey);
		if(len(sReplaced) > len(sPin))
		{
			sReplaced = left(sReplaced, (len(sReplaced) - 1));
			password_replaced$ = sReplaced;
		}
		else if(len(sReplaced) < len(sPin))
		{
			sReplaced = "";
			for(a = 1 to len(sPin))
			{
				sReplaced = sReplaced + csREPLACECHAR;
			}
			password_replaced$ = sReplaced;
		}
	}
}

PUSH clear
{
	sPin = "";
	sReplaced = "";
	password_replaced$ = sReplaced;
}

PUSH backspace
{
	if(len(sPin) > 0)
	{
		sPin = left(sPin, (len(sPin) - 1));
		if(len(sReplaced) > len(sPin))
		{
			sReplaced = left(sReplaced, (len(sReplaced) - 1));
			password_replaced$ = sReplaced;
		}
		else if(len(sReplaced) < len(sPin))
		{
			sReplaced = "";
			for(a = 1 to len(sPin))
			{
				sReplaced = sReplaced + csREPLACECHAR;
			}
			password_replaced$ = sReplaced;
		}	
	}
}

CHANGE Partition_Number
{
	if((Partition_Number > 0) && (Partition_Number < 9))
	{
		iPart = Partition_Number - 1;
	}
}

CHANGE command$
{
	while(len(command$) > 0)
	{
		iTemp = getc(command$);
		if(iTemp = 0x3C)
		{
			if(len(sPin) = 4)
			{
				iTempPassChr = 0;
				iTempPassChr1 = 0;
				sPass = "";
				for(a = 1 to 3 step 2)
				{
					iTemp1 = getc(sPin);
					iTemp2 = getc(sPin);
					iTempPassChr1 = atoi(chr(iTemp1));
					iTempPassChr2 = atoi(chr(iTemp2));
					iTempPassChr3 = (iTempPassChr2 << 4) | iTempPassChr1;
					sPass = sPass + chr(iTempPassChr3);
					if(a = 3)
					{
						sPass = sPass + "\x00";
					}
				}
				sTemp = chr(iTemp) + sPass;
				for(a = 1 to 2)
				{
					sTemp = sTemp + chr(getc(command$));
				}
				to_processor_module$ = sTemp + csENDCHAR;
				sTemp = "";
				sPass = "";
				iTempPassChr = 0;
				iTempPassChr1 = 0;
				sPin = "";
				sReplaced = "";
				password_replaced$ = sReplaced;
			}
			else if(len(sPin) = 6)
			{
				iTempPassChr = 0;
				iTempPassChr1 = 0;
				sPass = "";
				for(a = 1 to 5 step 2)
				{
					iTemp1 = getc(sPin);
					iTemp2 = getc(sPin);
					iTempPassChr1 = atoi(chr(iTemp1));
					iTempPassChr2 = atoi(chr(iTemp2));
					iTempPassChr3 = (iTempPassChr2 << 4) | iTempPassChr1;
					sPass = sPass + chr(iTempPassChr3);
				}
				sTemp = chr(iTemp) + sPass;
				for(a = 1 to 2)
				{
					sTemp = sTemp + chr(getc(command$));
				}
				to_processor_module$ = sTemp + CSENDCHAR;
				sTemp = "";
				sPass = "";
				iTempPassChr = 0;
				iTempPassChr1 = 0;
				sPin = "";
				sReplaced = "";
				password_replaced$ = sReplaced;
			}
		}
	}
}

CHANGE From_Processor$
{
	if(iFlag1 = 0)
	{
		iFlag1 = 1;
		while(find(csENDCHAR, From_Processor$) > 0)
		{
			sInTemp = remove(csENDCHAR, From_Processor$);
			if((byte(sInTemp, 2) = 0x06) && (byte(sInTemp, 3) = iPart))
			{
				for(b = 1 to 7)
				{
					iConditionFlag[b] = byte(sInTemp, b + 3);
					if(issignaldefined(Partition_Condition_Flag[b]) > 0)
					{
						Partition_Condition_Flag[b] = iConditionFlag[b];
					}
				}
			}
			else
			{
				sInTemp = "";
			}
		}
		iFlag1 = 0;
	}
}

FUNCTION Main()
{
	sPin = "";
	sReplaced = "";
	password_replaced$ = sReplaced;
	sInTemp = "";
	iFlag1 = 0;
}
