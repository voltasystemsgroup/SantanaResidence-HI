/***********************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
***********************************************************************************/
/*
Dealer Name:	Crestron Electronics
System Name:
System Number:
Programmer:		PAC
Comments:
*/
/***********************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
***********************************************************************************/
#SYMBOL_NAME "Carrier Processor v2"
// #HINT ""
#DEFINE_CONSTANT	ciPOLLSIZE			66
#DEFINE_CONSTANT	ciPOLLDONE			67
#DEFINE_CONSTANT	ciZONEPOLLSIZE	8
#DEFINE_CONSTANT	ciMAXCHARS			25
#DEFINE_CONSTANT	ciMAXZONES			8
#DEFINE_CONSTANT	ciMAXTRIES			5

#DEFINE_CONSTANT	csPOLLRH				"RH?"					//Zone "SxZx"
#DEFINE_CONSTANT	csPOLLRT				"RT?"					//Zone "SxZx"
#DEFINE_CONSTANT	csPOLLFAN				"FAN?"				//Zone "SxZx"
#DEFINE_CONSTANT	csPOLLHOLD			"HOLD?"				//Zone "SxZx"
#DEFINE_CONSTANT	csPOLLHTSP			"HTSP?"				//Zone "SxZx"
#DEFINE_CONSTANT	csPOLLCLSP			"CLSP?"				//Zone "SxZx"
#DEFINE_CONSTANT	csPOLLOVR				"OVR?"				//Zone "SxZx"
#DEFINE_CONSTANT	csPOLLOTMR			"OTMR?"				//Zone "SxZx"
#DEFINE_CONSTANT	csPOLLNAME			"NAME?"				//Zone "SxZx"
#DEFINE_CONSTANT	csPOLLOAT				"OAT?"				//System "Sx"
#DEFINE_CONSTANT	csPOLLMODE			"MODE?"				//System "Sx"
#DEFINE_CONSTANT	csPOLLDEALER		"DEALER?"			//System "Sx"
#DEFINE_CONSTANT	csPOLLDEALERPH	"DEALERPH?"		//System "Sx"

#DEFINE_CONSTANT	ciPOLLRH				1			//Zone "SxZx"
#DEFINE_CONSTANT	ciPOLLRT				2			//Zone "SxZx"
#DEFINE_CONSTANT	ciPOLLFAN				3			//Zone "SxZx"
#DEFINE_CONSTANT	ciPOLLHOLD			4			//Zone "SxZx"
#DEFINE_CONSTANT	ciPOLLHTSP			5			//Zone "SxZx"
#DEFINE_CONSTANT	ciPOLLCLSP			6			//Zone "SxZx"
#DEFINE_CONSTANT	ciPOLLOVR				7			//Zone "SxZx"
#DEFINE_CONSTANT	ciPOLLOTMR			8			//Zone "SxZx"
#DEFINE_CONSTANT	ciPOLLNAME			9			//Zone "SxZx"
#DEFINE_CONSTANT	ciPOLLOAT				10		//System "Sx"
#DEFINE_CONSTANT	ciPOLLMODE			11		//System "Sx"
#DEFINE_CONSTANT	ciPOLLDEALER		12		//System "Sx"
#DEFINE_CONSTANT	ciPOLLDEALERPH	13		//System "Sx"

#DEFINE_CONSTANT	csMODEOFF				"MODE:OFF"
#DEFINE_CONSTANT	csMODEHEAT			"MODE:HEAT"
#DEFINE_CONSTANT	csMODECOOL			"MODE:COOL"
#DEFINE_CONSTANT	csMODEAUTO			"MODE:AUTO"
#DEFINE_CONSTANT	csMODEEHEAT			"MODE:EHEAT"

#DEFINE_CONSTANT	csSENDMODEOFF		"MODE!OFF"
#DEFINE_CONSTANT	csSENDMODEHEAT	"MODE!HEAT"
#DEFINE_CONSTANT	csSENDMODECOOL	"MODE!COOL"
#DEFINE_CONSTANT	csSENDMODEAUTO	"MODE!AUTO"
#DEFINE_CONSTANT	csSENDMODEEHEAT	"MODE!EHEAT"

#DEFINE_CONSTANT	ciMODEOFF				0
#DEFINE_CONSTANT	ciMODEHEAT			1
#DEFINE_CONSTANT	ciMODECOOL			2
#DEFINE_CONSTANT	ciMODEAUTO			3
#DEFINE_CONSTANT	ciMODEEHEAT			4

#DEFINE_CONSTANT	csOAT						"OAT:"				
#DEFINE_CONSTANT	csACK						"ACK"
#DEFINE_CONSTANT	csENDCHAR				"\x0D\x0A"
// #CATEGORY "" 
#CATEGORY "22" // HVAC
#DEFAULT_VOLATILE
// #DEFAULT_NONVOLATILE
#HELP_BEGIN
	For use inside the Carrier Infinity v2 module only.
#HELP_END
/***********************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
***********************************************************************************/
DIGITAL_INPUT Poll_Next, Resend_In, Mode_Off, Mode_Heat, Mode_Cool, Mode_Auto,
							Mode_Eheat, Get_Dealer_Info, Send_Mode_Again;
ANALOG_INPUT	Number_of_Zones, System_Number;
BUFFER_INPUT	From_Modules$[150], From_Device$[250];

DIGITAL_OUTPUT	Timed_Out, Resend_Mode, Outside_Negative, Outside_Celsius;
ANALOG_OUTPUT 	Mode_In, Outside_Temperature;
STRING_OUTPUT		Dealer_Name$, Dealer_Phone$, To_Device$, Zone_Data$[ciMAXZONES];
/***********************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
***********************************************************************************/
INTEGER	iNextPoll, iFlag1, iFlag2, iZPointer, a, b, iTempZone, iTemp, iSystemNumber,
				iColonPointer, iEndPointer, iCurrentMode, iMaxPoll, iMaxZone, iPointer1,
				iPointer2, iModeCounter, iRequestedMode, iModeCount, iOutsideTemperature,
				iTempOutside, iOutsideNegative, iOutsideCelsius;
STRING	sTemp[50], sSystem[2], sSystem2[2], sPollQueue[ciPOLLSIZE][ciMAXCHARS],
				sDealer[50], sDealerPhone[50];
/***********************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
***********************************************************************************/
Function fTimeOut()
{
	wait(800, wTimeOut)
	{
		Timed_Out = On;
	}
}

FUNCTION fSendCommand()
{
	if(iNextPoll < ciPOLLDONE)
	{
		To_Device$ = sPollQueue[iNextPoll];
		call fTimeOut();
		iNextPoll = iNextPoll + 1;
		if((iNextPoll > iMaxPoll) && (iNextPoll < (ciPOLLSIZE - 1)))
		{
			iNextPoll = ciPOLLSIZE - 1;
		}
	}
}

FUNCTION fCreatePollQueue()
{
	for(a = 1 to ciMAXZONES)
	{
		for(b = 1 to ciZONEPOLLSIZE)
		{
			iTemp = ((a - 1) * ciZONEPOLLSIZE) + b;
			if(b = ciPOLLRH)
			{
				makestring(sPollQueue[iTemp], "S%dZ%d%s%s", iSystemNumber, a, csPOLLRH, csENDCHAR);
			}
			else if(b = ciPOLLRT)
			{
				makestring(sPollQueue[iTemp], "S%dZ%d%s%s", iSystemNumber, a, csPOLLRT, csENDCHAR);
			}
			else if(b = ciPOLLFAN)
			{
				makestring(sPollQueue[iTemp], "S%dZ%d%s%s", iSystemNumber, a, csPOLLFAN, csENDCHAR);
			}
			else if(b = ciPOLLHOLD)
			{
				makestring(sPollQueue[iTemp], "S%dZ%d%s%s", iSystemNumber, a, csPOLLHOLD, csENDCHAR);
			}
			else if(b = ciPOLLHTSP)
			{
				makestring(sPollQueue[iTemp], "S%dZ%d%s%s", iSystemNumber, a, csPOLLHTSP, csENDCHAR);
			}
			else if(b = ciPOLLCLSP)
			{
				makestring(sPollQueue[iTemp], "S%dZ%d%s%s", iSystemNumber, a, csPOLLCLSP, csENDCHAR);
			}
			else if(b = ciPOLLOVR)
			{
				makestring(sPollQueue[iTemp], "S%dZ%d%s%s", iSystemNumber, a, csPOLLOVR, csENDCHAR);
			}
			else if(b = ciPOLLOTMR)
			{
				makestring(sPollQueue[iTemp], "S%dZ%d%s%s", iSystemNumber, a, csPOLLOTMR, csENDCHAR);
			}
		}
	}
	makestring(sPollQueue[65], "S%d%s%s", iSystemNumber, csPOLLOAT, csENDCHAR);
	makestring(sPollQueue[66], "S%d%s%s", iSystemNumber, csPOLLMODE, csENDCHAR);
}
/***********************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
***********************************************************************************/
PUSH Resend_In
{
	delay(1);
	Timed_Out = Off;
	call fSendCommand();
}

PUSH Poll_Next
{
	if(iNextPoll = ciPOLLDONE)
	{
		iNextPoll = 1;
		call fSendCommand();
	}
}

PUSH Mode_Off
{
	iRequestedMode = ciMODEOFF;
	Mode_In = iRequestedMode;
	makestring(To_Device$, "S%d%s%s", iSystemNumber, csSENDMODEOFF, csENDCHAR);
	iModeCount = 1;
	To_Device$ = sPollQueue[66];
}

PUSH Mode_Heat
{
	iRequestedMode = ciMODEHEAT;
	Mode_In = iRequestedMode;
	makestring(To_Device$, "S%d%s%s", iSystemNumber, csSENDMODEHEAT, csENDCHAR);
	iModeCount = 1;
	To_Device$ = sPollQueue[66];
}

PUSH Mode_Cool
{
	iRequestedMode = ciMODECOOL;
	Mode_In = iRequestedMode;
	makestring(To_Device$, "S%d%s%s", iSystemNumber, csSENDMODECOOL, csENDCHAR);
	iModeCount = 1;
	To_Device$ = sPollQueue[66];
}

PUSH Mode_Auto
{
	iRequestedMode = ciMODEAUTO;
	Mode_In = iRequestedMode;
	makestring(To_Device$, "S%d%s%s", iSystemNumber, csSENDMODEAUTO, csENDCHAR);
	iModeCount = 1;
	To_Device$ = sPollQueue[66];
}

PUSH Mode_Eheat
{
	iRequestedMode = ciMODEEHEAT;
	Mode_In = iRequestedMode;
	makestring(To_Device$, "S%d%s%s", iSystemNumber, csSENDMODEEHEAT, csENDCHAR);
	iModeCount = 1;
	To_Device$ = sPollQueue[66];
}

PUSH Send_Mode_Again
{
	Resend_Mode = Off;
	if(iRequestedMode <> iCurrentMode)
	{
		iModeCount = iModeCount + 1;
		if(iModeCount > ciMAXTRIES)
		{
			iRequestedMode = iCurrentMode;
			Mode_In = iRequestedMode;
		}
		else
		{
			if(iRequestedMode = ciMODEOFF)
			{
				makestring(To_Device$, "S%d%s%s", iSystemNumber, csSENDMODEOFF, csENDCHAR);
				To_Device$ = sPollQueue[66];
			}
			else if(iRequestedMode = ciMODEHEAT)
			{
				makestring(To_Device$, "S%d%s%s", iSystemNumber, csSENDMODEHEAT, csENDCHAR);
				To_Device$ = sPollQueue[66];
			}
			else if(iRequestedMode = ciMODECOOL)
			{
				makestring(To_Device$, "S%d%s%s", iSystemNumber, csSENDMODECOOL, csENDCHAR);
				To_Device$ = sPollQueue[66];
			}
			else if(iRequestedMode = ciMODEAUTO)
			{
				makestring(To_Device$, "S%d%s%s", iSystemNumber, csSENDMODEAUTO, csENDCHAR);
				To_Device$ = sPollQueue[66];
			}
			else if(iRequestedMode = ciMODEEHEAT)
			{
				makestring(To_Device$, "S%d%s%s", iSystemNumber, csSENDMODEEHEAT, csENDCHAR);
				To_Device$ = sPollQueue[66];
			}
		}
	}
}

PUSH Get_Dealer_Info
{
	makestring(To_Device$, "S%dDEALER?%sS%dDEALERPH?%s", iSystemNumber, csENDCHAR, iSystemNumber, csENDCHAR);
}

CHANGE Number_Of_Zones
{
	if(Number_Of_Zones <= ciMAXZONES)
	{
		iMaxZone = Number_Of_Zones;
		iMaxPoll = iMaxZone * ciZONEPOLLSIZE;
	}
}

CHANGE System_Number
{
	if((System_Number > 0) && (System_Number < 9))
	{
		iSystemNumber = System_Number;
		makestring(sSystem, "S%d", iSystemNumber);
		makestring(sSystem2, "%dZ", iSystemNumber);
	}
	else
	{
		sSystem = "S1";
		sSystem2 = "1Z";
	}
	call fCreatePollQueue();
}

CHANGE From_Modules$
{
	if(iFlag1 = Off)
	{
		iFlag1 = On;
		while(find(csENDCHAR, From_Modules$) > 0)
		{
			To_Device$ = remove(csENDCHAR, From_Modules$);
		}
		iFlag1 = Off;
	}
}

CHANGE From_Device$
{
	if(iFlag2 = Off)
	{
		iFlag2 = On;
		while(find(csENDCHAR, From_Device$) > 0)
		{
			sTemp = remove(csENDCHAR, From_Device$);
			if(find(sSystem, sTemp) > 0)
			{
				cancelwait(wTimeOut);
				/**************************************************************
				*		If this an ACK, send the next command.    						    *
				**************************************************************/
				if(find(csACK, sTemp) > 0)
				{
					call fSendCommand();
				}
				/**************************************************************
				*		Else if this is dealer information, process the data and  *
				* send it to the proper output. Feedback will be sent via     *
				* serial signals.                                             *
				**************************************************************/
				else if(find("DEALER", sTemp) > 0)
				{
					iPointer1 = find(":", sTemp);
					iPointer2 = find(csENDCHAR, sTemp);
					if(find("NAK", sTemp) > 0)
					{
						call fSendCommand();
					}
					else if(find("DEALERPH", sTemp) > 0)
					{
						sDealerPhone = mid(sTemp, (iPointer1 + 1), (iPointer2 - iPointer1 - 1));
						Dealer_Phone$ = sDealerPhone;
						call fSendCommand();
					}
					else
					{
						sDealer = mid(sTemp, (iPointer1 + 1), (iPointer2 - iPointer1 - 1));
						Dealer_Name$ = sDealer;
						call fSendCommand();
					}
				}
				/**************************************************************
				*		Else if this has zone data, process the data and send it  *
				* to the proper zone module. All feedback will be sent via    *
				* serial signals. The serial outputs will be an array.        *
				**************************************************************/
				else if(find("Z", sTemp) > 0)
				{
					iZPointer = find("Z", sTemp);
					iTempZone = atoi(mid(sTemp, iZPointer, 2));
					Zone_Data$[iTempZone] = sTemp;
					call fSendCommand();
				}
				/**************************************************************
				*		Else if this is the outside temperature, process the data *
				* and send it to the output. The output is a serial signal.   *
				**************************************************************/
				else if((find(csOAT, sTemp) > 0) && (find("NAK", sTemp) = 0))
				{
					iColonPointer = find(":", sTemp);
					iEndPointer = find(csENDCHAR, sTemp);
					iTempOutside = atoi(mid(sTemp, (iColonPointer + 1), iEndPointer - iColonPointer - 3));
					if(iTempOutside <> iOutsideTemperature)
					{
						iOutsideTemperature = iTempOutside;
						Outside_Temperature = iOutsideTemperature;
					}
					if(find("-", sTemp) > 0)
					{
						iOutsideNegative = 1;
						Outside_Negative = iOutsideNegative;
					}
					else
					{
						iOutsideNegative = 0;
						Outside_Negative = iOutsideNegative;
					}
					if(find("\xB0C", sTemp) > 0)
					{
						iOutsideCelsius = 1;
						Outside_Celsius = iOutsideCelsius;
					}
					if(find("\xB0F", sTemp) > 0)
					{
						iOutsideCelsius = 0;
						Outside_Celsius = iOutsideCelsius;
					}
					call fSendCommand();
				}
				/**************************************************************
				*		Else if the mode command is NAKed, resend the command     *
				**************************************************************/
				else if((find("MODE:", sTemp) > 0) && (find("NAK", sTemp) > 0))
				{
					Resend_Mode = On;
				}
				/**************************************************************
				*		Else if this is mode off, process the data and send it to *
				* the output. The output is an analog output.                 *
				**************************************************************/
				else if((find(csMODEOFF, sTemp) > 0) && (find("NAK", sTemp) = 0))
				{
					if((iRequestedMode <> iCurrentMode) && (iRequestedMode = ciMODEOFF))
					{
						iCurrentMode = ciMODEOFF;
						iRequestedMode = iCurrentMode;
						Mode_In = iRequestedMode;
						call fSendCommand();
					}
					else if(iRequestedMode <> iCurrentMode)
					{
						Resend_Mode = On;
					}
					else if(iCurrentMode <> ciMODEOFF)
					{
						iCurrentMode = ciMODEOFF;
						iRequestedMode = iCurrentMode;
						Mode_In = iRequestedMode;
						call fSendCommand();
					}
					else
					{
						call fSendCommand();
					}
				}
				/**************************************************************
				*		Else if this is mode heat, process the data and send it to*
				* the output. The output is an analog output.                 *
				**************************************************************/
				else if((find(csMODEHEAT, sTemp) > 0) && (find("NAK", sTemp) = 0))
				{
					if((iRequestedMode <> iCurrentMode) && (iRequestedMode = ciMODEHEAT))
					{
						iCurrentMode = ciMODEHEAT;
						iRequestedMode = iCurrentMode;
						Mode_In = iRequestedMode;
						call fSendCommand();
					}
					else if(iRequestedMode <> iCurrentMode)
					{
						Resend_Mode = On;
					}
					else if(iCurrentMode <> ciMODEHEAT)
					{
						iCurrentMode = ciMODEHEAT;
						iRequestedMode = iCurrentMode;
						Mode_In = iRequestedMode;
						call fSendCommand();
					}
					else
					{
						call fSendCommand();
					}
				}
				/**************************************************************
				*		Else if this is mode cool, process the data and send it to*
				* the output. The output is an analog output.                 *
				**************************************************************/
				else if((find(csMODECOOL, sTemp) > 0) && (find("NAK", sTemp) = 0))
				{
					if((iRequestedMode <> iCurrentMode) && (iRequestedMode = ciMODECOOL))
					{
						iCurrentMode = ciMODECOOL;
						iRequestedMode = iCurrentMode;
						Mode_In = iCurrentMode;
						call fSendCommand();
					}
					else if(iRequestedMode <> iCurrentMode)
					{
						Resend_Mode = On;
					}
					else if(iCurrentMode <> ciMODECOOL)
					{
						iCurrentMode = ciMODECOOL;
						iRequestedMode = iCurrentMode;
						Mode_In = iRequestedMode;
						call fSendCommand();
					}
					else
					{
						call fSendCommand();
					}
				}
				/**************************************************************
				*		Else if this is mode auto, process the data and send it to*
				* the output. The output is an analog output.                 *
				**************************************************************/
				else if((find(csMODEAUTO, sTemp) > 0) && (find("NAK", sTemp) = 0))
				{
					if((iRequestedMode <> iCurrentMode) && (iRequestedMode = ciMODEAUTO))
					{
						iCurrentMode = ciMODEAUTO;
						iRequestedMode = iCurrentMode;
						Mode_In = iCurrentMode;
						call fSendCommand();
					}
					else if(iRequestedMode <> iCurrentMode)
					{
						Resend_Mode = On;
					}
					else if(iCurrentMode <> ciMODEAUTO)
					{
						iCurrentMode = ciMODEAUTO;
						iRequestedMode = iCurrentMode;
						Mode_In = iRequestedMode;
						call fSendCommand();
					}
					else
					{
						call fSendCommand();
					}
				}
				/**************************************************************
				*		Else if this is mode eheat, process the data and send it  *
				* to the output. The output is an analog output.              *
				**************************************************************/
				else if((find(csMODEEHEAT, sTemp) > 0) && (find("NAK", sTemp) = 0))
				{
					if((iRequestedMode <> iCurrentMode) && (iRequestedMode = ciMODEEHEAT))
					{
						iCurrentMode = ciMODEEHEAT;
						iRequestedMode = iCurrentMode;
						Mode_In = iCurrentMode;
						call fSendCommand();
					}
					else if(iRequestedMode <> iCurrentMode)
					{
						Resend_Mode = On;
					}
					else if(iCurrentMode <> ciMODEEHEAT)
					{
						iCurrentMode = ciMODEEHEAT;
						iRequestedMode = iCurrentMode;
						Mode_In = iRequestedMode;
						call fSendCommand();
					}
					else
					{
						call fSendCommand();
					}
				}
				/**************************************************************
				*		Else send the next command.                               *
				**************************************************************/
				else
				{
					call fSendCommand();
				}
			}
		}
		iFlag2 = Off;
	}
}
/***********************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
***********************************************************************************/
Function Main()
{
	iFlag1 = Off;
	iFlag2 = Off;
	iNextPoll = ciPOLLDONE;
	iCurrentMode = ciMODEAUTO;
	iRequestedMode = iCurrentMode;
	Mode_In = iRequestedMode;
}
