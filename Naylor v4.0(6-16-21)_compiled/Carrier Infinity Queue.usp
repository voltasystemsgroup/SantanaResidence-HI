/***********************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
***********************************************************************************/
/*
Dealer Name:	Crestron Electronics
System Name:
System Number:
Programmer:		PAC
Comments:
*/
/***********************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
***********************************************************************************/
#SYMBOL_NAME "Carrier Infinity Queue"
// #HINT ""
#DEFINE_CONSTANT	ciQUEUESIZE			30
#DEFINE_CONSTANT	ciPOLLQUEUESIZE	140
#DEFINE_CONSTANT	ciMAXCHARS			50

#DEFINE_CONSTANT	csENDCHAR				"\x0D\x0A"
// #CATEGORY "" 
#CATEGORY "22" // HVAC
#DEFAULT_VOLATILE
// #DEFAULT_NONVOLATILE

#HELP_BEGIN
	For use inside the Carrier Infinity Queue Module Only.
#HELP_END
/***********************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
***********************************************************************************/
DIGITAL_INPUT	Send_Next;
BUFFER_INPUT	From_Modules$[800], From_Device$[200];

DIGITAL_OUTPUT	Timed_Out;
STRING_OUTPUT	To_Device$, To_System$[2];
/***********************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
***********************************************************************************/
INTEGER	iNextSend, iNextStore, iNextPollSend, iNextPollStore, iFlag1, iFlag2,
				iSendOk, iTemp;
STRING	sTempCommand[50], sTempResponse[50], sQueue[ciQUEUESIZE][ciMAXCHARS],
				sPollQueue[ciPOLLQUEUESIZE][ciMAXCHARS];
/***********************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
***********************************************************************************/
Function fTimeOut()
{
	wait(500, wTimeOut)
	{
		Timed_Out = On;
	}
}
/***********************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
***********************************************************************************/
PUSH Send_Next
{
	delay(1);
	Timed_Out = Off;
	if(iNextStore <> iNextSend)
	{
		To_Device$ = SQueue[iNextSend];
		iNextSend = iNextSend + 1;
		if(iNextSend > ciQUEUESIZE)
		{
			iNextSend = 1;
		}
		call fTimeOut();
	}
	else if(iNextPollStore <> iNextPollSend)
	{
		To_Device$ = SPollQueue[iNextSend];
		iNextPollSend = iNextPollSend + 1;
		if(iNextPollSend > ciPOLLQUEUESIZE)
		{
			iNextPollSend = 1;
		}
		call fTimeOut();
	}
	else
	{
		iSendOk = On;
	}
}

CHANGE From_Modules$
{
	if(iFlag1 = Off)
	{
		iFlag1 = On;
		while(find(csENDCHAR, From_Modules$) > 0)
		{
			sTempCommand = remove(csENDCHAR, From_Modules$);
			if(iSendOk = On)
			{
				To_Device$ = sTempCommand;
				iSendOk = Off;
				call fTimeOut();
			}
			else
			{
				if(find("?", sTempCommand) > 0)
				{
					sPollQueue[iNextPollStore] = sTempCommand;
					iNextPollStore = iNextPollStore + 1;
					if(iNextPollStore > ciPOLLQUEUESIZE)
					{
						iNextPollStore = 1;
					}
				}
				else
				{
					sQueue[iNextStore] = sTempCommand;
					iNextStore = iNextStore + 1;
					if(iNextStore > ciQUEUESIZE)
					{
						iNextStore = 1;
					}
				}
			}
		}
		iFlag1 = Off;
	}
}

CHANGE From_Device$
{
	if(iFlag2 = Off)
	{
		iFlag2 = On;
		while(find(csENDCHAR, From_Device$) > 0)
		{
			cancelwait(wTimeOut);
			sTempResponse = remove(csENDCHAR, From_Device$);
			iTemp = atoi(sTempResponse);
			To_System$[iTemp] = sTempResponse;
			if(iNextStore <> iNextSend)
			{
				To_Device$ = SQueue[iNextSend];
				iNextSend = iNextSend + 1;
				if(iNextSend > ciQUEUESIZE)
				{
					iNextSend = 1;
				}
				call fTimeOut();
			}
			else if(iNextPollStore <> iNextPollSend)
			{
				To_Device$ = SPollQueue[iNextPollSend];
				iNextPollSend = iNextPollSend + 1;
				if(iNextPollSend > ciPOLLQUEUESIZE)
				{
					iNextPollSend = 1;
				}
				call fTimeOut();
			}
			else
			{
				iSendOk = On;
			}
		}
		iFlag2 = Off;
	}
}
/***********************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
***********************************************************************************/
Function Main()
{
	iFlag1 = Off;
	iFlag2 = Off;
	iNextPollStore = 1;
	iNextPollSend = 1;
	iNextStore = 1;
	iNextSend = 1;
	iSendOk = On;
}
