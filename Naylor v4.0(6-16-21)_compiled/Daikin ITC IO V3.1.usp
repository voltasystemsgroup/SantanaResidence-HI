/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: Crestron International
System Name:
System Number:
Programmer: Niko Brasseur
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "Daikin ITC IO V3.1"
// #HINT ""
#DEFINE_CONSTANT COMMAND_DELIMITER     "\x0D\x0A"
#DEFINE_CONSTANT TIME_BETWEEN_TRIES    200
#DEFINE_CONSTANT NUMBER_OF_TRIES       3 
#DEFINE_CONSTANT FROMUNITS_LENGTH      200
#DEFINE_CONSTANT RX_LENGTH             5000
#DEFINE_CONSTANT CONNECTION_TIMEOUT    20
#DEFINE_CONSTANT MAX_CONNECTIONTRIES   5
// #CATEGORY "" 
// #DEFAULT_VOLATILE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING

#HELP_BEGIN
Only to be used with the "Daikin ITC IO V3.0.umc" module.      


- Added Delay before polling units.       
- Changed "if (byte(command, 2) = 115)" in "Function GetCommands"


#HELP_END


/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Connect_F$;
DIGITAL_INPUT Trigger$;

BUFFER_INPUT FromUnits$[FROMUNITS_LENGTH];
BUFFER_INPUT Rx$[RX_LENGTH];

DIGITAL_OUTPUT Connect$;

STRING_OUTPUT ToUnits$;
STRING_OUTPUT Tx$;   

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER fromUnitsOK, triggerOK;
STRING command[20], commandArray[127][24]; 

INTEGER i, commandsPresent, poll, connectionTries, waiting;  

INTEGER rxOK;    


INTEGER marker1, marker2, length;
STRING tempString[4500], commandType[4];  

INTEGER l;     

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

Function SetUnits()
{        
	INTEGER tempInt, j;
	STRING tempString[4];
    STRING setUnitString[3200];
     
    commandsPresent = 0;                                                                                                                                        
	for (i = 0 to 127)
	{       
		if (len(commandArray[i]))
		{     
			if (byte(commandArray[i], 5) = 115)
			{
				commandsPresent = commandsPresent + 1;
			}
		}
	} 
	
	tempInt = (commandsPresent * 24) + 32;
    tempString = chr(tempInt mod 256) + chr(tempInt/256) + "\x00\x00";
    
    setUnitString = "POST /cmd/ HTTP/1.1 \x0D\x0AContent-Length: " + itoa(tempInt) + "\x0D\x0AContent-Type: application/octet-stream\x0D\x0A\x0D\x0A";    
    
    setUnitString = setUnitString + tempString +                         // COMMAND SIZE
    					"\x76\x11\x01\x00" +                             // COMMAND ID
    					chr(commandsPresent) + "\x00\x00\x00" +          // NUMBER OF AC'S
					    "\x00\x00\x00\x00" +                             // RESERVED
					    "\x00\x00\x00\x00" +                             // RESERVED
					    "\x00\x00\x00\x00" +                             // RESERVED
					    "\x00\x00\x00\x00" +                             // RESERVED
					    "\x00\x00\x00\x00";                              // RESERVED
					    
	for (j = 0 to 127)
	{
		if (len(commandArray[j]))
		{                       
			if (byte(commandArray[j], 5) = 115)
			{
				setUnitString = setUnitString + commandArray[j];
				commandArray[j] = chr(j) + "\x00\x00\x00\x00";
			}
		}
	}				                                        
	
	while (len(setUnitString) > 250)
	{
		Tx$ = remove(left(setUnitString, 250), setUnitString);
	}	                                                      
	Tx$ = setUnitString; 
}    


Function PollUnits()
{
	INTEGER tempInt, j, k, pollByte;
	STRING tempString[4];
    STRING pollUnitString[3200];
    
    pollUnitString = "POST /cmd/ HTTP/1.1 \x0D\x0AContent-Length: 32\x0D\x0AContent-Type: application/octet-stream\x0D\x0A\x0D\x0A";				
	pollUnitString = pollUnitString + "\x20\x00\x00\x00" +
						"\x74\x11\x01\x00" +
						"\x00\x00\x00\x00" + 
						"\x00\x00\x00\x00";
	
	for(j = 0 to 15)
	{       
		pollByte = 0;
		for (k = 0 to 7)
		{
			if (len(commandArray[(j*8)+k]))
			{                       
				if (byte(commandArray[(j*8)+k], 5) = 0)
				{                                
					pollByte = pollByte ^ (1 << k);
					commandArray[(j*8)+k] = "";
				}
			}			
		}                            
		pollUnitString = pollUnitString + chr(pollByte);
	}  
	
	Tx$ = pollUnitString;
}   


Function GetCommands()
{
	if (fromUnitsOK)
	{
		fromUnitsOK = 0;      
		while(find(COMMAND_DELIMITER, FromUnits$))
		{                       
			command = remove(COMMAND_DELIMITER, FromUnits$); // \x01(ID)\x73(SETTING)\x01(POWER)\x01\x00(OPMODE)\x01\x00\x00\x00(TEMP)\x01(SPEED)\x01(DIRECTION)
			if (len(commandArray[byte(command, 1)]))
			{                                     
				if (byte(command, 2) = 115)
				{
					commandArray[byte(command, 1)] = mid(command, 1, 1) + "\x00\x00\x00" +		
												mid(command, 2, 1) + "\x00\x00\x00" + 
												mid(command, 3, 1) + "\x00" + 
												mid(command, 4, 2) + 
												"\x00\x00\x00\x00" + 
												mid(command, 6, 4) + 
												mid(command, 10, 1) + 
												mid(command, 11, 1) + 
												"\x01\x00";  		
				}
			}    
			else
			{
				commandArray[byte(command, 1)] = mid(command, 1, 1) + "\x00\x00\x00" +		
												mid(command, 2, 1) + "\x00\x00\x00" + 
												mid(command, 3, 1) + "\x00" + 
												mid(command, 4, 2) + 
												"\x00\x00\x00\x00" + 
												mid(command, 6, 4) + 
												mid(command, 10, 1) + 
												mid(command, 11, 1) + 
												"\x01\x00";  
			}                                            
			delay(2);						
		}         
		fromUnitsOK = 1;
	}
}


/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH Trigger$
{
	If (triggerOK && fromUnitsOK)
	{
		triggerOK = 0;
		commandsPresent = 0;    
		for (i = 0 to 127)
		{       
			if (len(commandArray[i]))
			{
				commandsPresent = commandsPresent + 1;
			}
		} 
	
		if (commandsPresent)
		{
			Connect$ = 1;
			delay(CONNECTION_TIMEOUT);
			//{                   
				if (Connect_F$)
				{
					connectionTries = 0;   
					call SetUnits();    
					wait (1000, waitTriggerOK)
					{         
						print("\nCommunication Error"); 
						setArray(commandArray, "");
						triggerOK = 1;             
						Connect$ = 0;
					}					
				}  
				else
				{     
					connectionTries = connectionTries + 1;			
					print("\nUnable to establish connection: %d attempt(s)", connectionTries);			
					if (connectionTries >= MAX_CONNECTIONTRIES)
					{                             
						print("\nNo connection");
						setArray(commandArray, "");
						triggerOK = 1;
						Connect$ = 0;
					} 
					triggerOK = 1;
				} 
			//}
		}                         
		else
		{
			triggerOK = 1;           
		}
	}
}


CHANGE FromUnits$
{            
	call getCommands();
}


CHANGE Rx$
{
	if (rxOK)
	{
		rxOK = 0;
		marker1 = find("Content-Length: ", Rx$);
		if (len(Rx$) >= marker1 + 4)
		{
			marker1 = marker1 + 1;
			marker2 = find("\x0D\x0A", Rx$, marker1);
			length = atoi(mid(Rx$, marker1, marker2-marker1));
			if (len(Rx$) >= length + marker2 + 3)
			{                 
				tempString = remove(left(Rx$, length + marker2 + 3), Rx$);
				
				marker1 = marker2 + 4;
				marker1 = marker1 + 4;
				commandType = mid(tempString, marker1, 4);
				
				if (commandType = "\x77\x11\x01\x00")
				{                  
					delay (300);
					Connect$ = 0;
					Connect$ = 1;
					wait (CONNECTION_TIMEOUT)
					{	
						if (Connect_F$)
						{
							call PollUnits();				
						}
						else
						{      
							Connect$ = 0;
							print("\nUnable to poll unit: No connection");
						}
					}
				}    
				else if (commandType = "\x75\x11\x01\x00")
				{
					Connect$ = 0;
					Cancelwait(waitTriggerOK); 
					marker2 = marker1 + 24;
					if (byte(tempString, marker2))
					{       
						marker1 = marker2 + 4;
						for (l = 1 to byte(tempString, marker2))
						{
							ToUnits$ = mid(tempString, marker1, 32);
							marker1 = marker1 + 32;    
							delay(1);
						}				
					}  
					triggerOK = 1;		
				}
			}
		}
		rxOK = 1;
	}
}


/*
EVENT
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	setArray(commandArray, "");
	triggerOK = 1;
	fromUnitsOK = 1; 
	rxOK = 1;  
	connectionTries = 1;  
	poll = 0;  
	waiting = 0;
}


